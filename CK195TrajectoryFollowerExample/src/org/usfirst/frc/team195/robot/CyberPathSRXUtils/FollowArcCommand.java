package org.usfirst.frc.team195.robot.CyberPathSRXUtils;


import com.ctre.phoenix.motion.MotionProfileStatus;
import com.ctre.phoenix.motion.SetValueMotionProfile;
import com.ctre.phoenix.motion.TrajectoryPoint;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FollowerType;
import com.ctre.phoenix.motorcontrol.StatusFrame;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import com.ctre.phoenix.sensors.PigeonIMU;
import edu.wpi.first.wpilibj.Notifier;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc.team195.robot.Robot;
import org.usfirst.frc.team195.robot.RobotMap;

/**
 * A command to follow a motion profile trajectory generated by this tool:
 * https://frcteam195.github.io/CyberPathSRX/
 */
public class FollowArcCommand extends Command {

	private TalonSRX masterArcTalon = RobotMap.frontRightDrive;
	private TalonSRX otherDriveTalon = RobotMap.frontLeftDrive;
	private PigeonIMU pidgey = RobotMap.pidgey;

	private int kMinPointsInTalon = 5;

	private boolean isFinished = false;

	private CyberSRXTrajectory trajectoryToFollow = null;

	private MotionProfileStatus status = new MotionProfileStatus();

	private boolean hasPathStarted;

	/**
	 * this is only either Disable, Enable, or Hold. Since we'd never want one side
	 * to be enabled while the other is disabled, we'll use the same status for both
	 * sides.
	 */
	private SetValueMotionProfile setValue = SetValueMotionProfile.Disable;

	private class BufferLoader implements Runnable {
		private int pointIndex = 0;
		private TalonSRX talon;
		private CyberSrxMotionProfile prof;
		private final boolean flipped;

		public BufferLoader(TalonSRX talon, CyberSrxMotionProfile prof, boolean flipped) {
			this.talon = talon;
			this.prof = prof;
			this.flipped = flipped;
		}

		public void run() {
			talon.processMotionProfileBuffer();

			if (pointIndex >= prof.numPoints) {
				return;
			}

			//Only stream points to the talon while it can accept more points
			while (pointIndex < prof.numPoints && !talon.isMotionProfileTopLevelBufferFull()) {
				TrajectoryPoint point = new TrajectoryPoint();
				point.position = prof.points[pointIndex][0];
				point.velocity = prof.points[pointIndex][1];
				point.timeDur = TrajectoryPointHelper.valueOf((int) prof.points[pointIndex][2]);
				point.auxiliaryPos = (flipped ? -1 : 1) * 10 * prof.points[pointIndex][3];
				point.profileSlotSelect0 = TrajectoryGainConstants.driveProfileSlot;
				point.profileSlotSelect1 = TrajectoryGainConstants.turnProfileSlot;
				point.zeroPos = (pointIndex == 0);
				point.isLastPoint = (pointIndex++ == (prof.numPoints - 1));

				talon.pushMotionProfileTrajectory(point);
				hasPathStarted = true;
			}
		}
	}

	// Runs the runnable
	private Notifier bufferLoader;

	public FollowArcCommand(CyberSRXTrajectory trajectoryToFollow) {
		requires(Robot.drive);
		this.trajectoryToFollow = trajectoryToFollow;
	}

	// Called just before this Command runs the first time
	protected void initialize() {

		setUpTalons();

		masterArcTalon.set(ControlMode.MotionProfileArc, SetValueMotionProfile.Disable.value);
		otherDriveTalon.follow(masterArcTalon, FollowerType.AuxOutput1);

		if (trajectoryToFollow.highGear) {
			//Shift to high gear here
		} else {
			//Shift to low gear here
		}

		bufferLoader = new Notifier(new BufferLoader(masterArcTalon, trajectoryToFollow.profile, trajectoryToFollow.flipped));

		bufferLoader.startPeriodic(.005);
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		masterArcTalon.getMotionProfileStatus(status);

		if (status.isUnderrun) {
			// if either MP has underrun, stop both
			System.out.println("Motion profile has underrun!");
			setValue = SetValueMotionProfile.Disable;
		} else if (status.btmBufferCnt > kMinPointsInTalon) {
			// if we have enough points in the talon, go.
			setValue = SetValueMotionProfile.Enable;
			//System.out.println("This works");
		} else if (status.activePointValid && status.isLast) {
			// if both profiles are at their last points, hold the last point
			setValue = SetValueMotionProfile.Hold;
		}

		masterArcTalon.set(ControlMode.MotionProfileArc, setValue.value);
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		if (!hasPathStarted) {
			return false;
		}
		boolean trajectoryComplete = status.activePointValid && status.isLast;
		if (trajectoryComplete) {
			System.out.println("Finished trajectory");
		}
		return trajectoryComplete || isFinished;
	}

	// Called once after isFinished returns true
	protected void end() {
		bufferLoader.stop();
		resetTalons(ControlMode.PercentOutput, 0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		bufferLoader.stop();
		resetTalons(ControlMode.PercentOutput, 0);
	}
	
	public double getDistance() {
		return masterArcTalon.getSelectedSensorPosition(0);
	}
	
	public double getAngle() {
		double[] ypr = new double[3];
		pidgey.getYawPitchRoll(ypr);
		return ypr[0];
	}

	// set up the talon for motion profile control
	private void setUpTalons() {
		masterArcTalon.clearMotionProfileTrajectories();
		masterArcTalon.changeMotionControlFramePeriod(5);
		masterArcTalon.clearMotionProfileHasUnderrun(10);
		masterArcTalon.setStatusFramePeriod(StatusFrame.Status_1_General, 5, 5);

		otherDriveTalon.clearMotionProfileTrajectories();
		otherDriveTalon.changeMotionControlFramePeriod(5);
		otherDriveTalon.clearMotionProfileHasUnderrun(10);
		otherDriveTalon.setStatusFramePeriod(StatusFrameEnhanced.Status_1_General, 5, 10);
		otherDriveTalon.setStatusFramePeriod(StatusFrameEnhanced.Status_2_Feedback0, 5, 10);
	}

	// set the to the desired controlMode
	// used at the end of the motion profile
	private void resetTalons(ControlMode controlMode, double setValue) {
		masterArcTalon.clearMotionProfileTrajectories();
		masterArcTalon.changeMotionControlFramePeriod(10);
		masterArcTalon.clearMotionProfileHasUnderrun(10);
		masterArcTalon.setStatusFramePeriod(StatusFrame.Status_1_General, 10, 5);
		masterArcTalon.set(controlMode, setValue);

		otherDriveTalon.clearMotionProfileTrajectories();
		otherDriveTalon.clearMotionProfileHasUnderrun(10);
		otherDriveTalon.changeMotionControlFramePeriod(10);
		otherDriveTalon.setStatusFramePeriod(StatusFrameEnhanced.Status_1_General, 10, 10);
		otherDriveTalon.setStatusFramePeriod(StatusFrameEnhanced.Status_2_Feedback0, 20, 10);
		otherDriveTalon.set(controlMode, setValue);
	}
}